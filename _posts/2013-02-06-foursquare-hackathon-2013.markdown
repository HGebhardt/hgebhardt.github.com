---
layout: post
tags: [foursquare, API, Hackathon]
title: foursquare Hackathon 2013
---
Ich habe mir gedacht besser spät als nie und deshalb fasse ich hier mal meine Gedanken zum [foursquare Hackathon 2013](https://www.hackerleague.org/hackathons/foursquare-hackathon-2013) zusammen. Da ich dieses Jahr mit einer kleinen Gruppe ([Jonas](https://twitter.com/toxinlabs), [Stefan](https://twitter.com/andsynchrony) und ich) das Projekt [quetch](https://www.hackerleague.org/hackathons/foursquare-hackathon-2013/hacks/quetch) gestartet habe, kann ich etwas aus über die wichtigen Aspekte der foursquare API schreiben. Leider sind wir nicht ganz fertig geworden und konnten damit keinen Preis abstauben. Macht aber nichts, denn es hat sehr viel Spaß bereitet und der Lernfaktor ist nicht zu unterschätzen.
Neben der Anwendung haben wir ein kleines Video erstellt, das den Zweck etwas darstellen soll:

<iframe src="http://player.vimeo.com/video/56883705?byline=0&amp;portrait=0" width="500" height="281" frameborder="0" webkitAllowFullScreen="true" mozallowfullscreen="true" allowFullScreen="true">     </iframe>

Eine Anbindung an die [foursquare Plattform](https://developer.foursquare.com/overview/) ist recht einfach zu bewerkstelligen, da es eine gut [dokumentierte API](https://developer.foursquare.com/docs/) gibt. Wenn man ein paar Grundkenntnisse in OAuth hat, dann sollte die ganze Geschichte sogar noch einfacher werden. Aber auch hier hält die Dokumentation eine [kleine Einführung bereit](https://developer.foursquare.com/overview/auth).  
Eine besondere Form der Interaktion kommt mit der [foursquare App Plattform](https://developer.foursquare.com/overview/apps) ins Spiel. Diese API ermöglicht zum einen eine gute Integration und zum anderen ist eine direkte Benutzerinteraktion möglich. Für den Hackathon fiel unser Augenmerk besonders auf die [User Push API](https://developer.foursquare.com/overview/realtime). Es ist bei foursquare möglich, dass registrierte Anwendungen bei jede Check-In-Information eines Benutzers zugeschickt bekommen, sofern der Benutzer die entsprechende Anwendung nutzt und somit seine Erlaubnis erteilt hat. Als einfaches Beispiel für so einen Anwendungsfall lässt sich der Check-In an einer Bushaltestelle nehmen. Wenn man als Entwickler eine Fahrplan-Anwendung mit Daten bereitstellt, dann könnten Benutzer bei jedem Check-in über die nächsten Verbindungen (und vielleicht sogar Verspätungen) informiert werden. Da neben Informationen zum Venue (wie z.B. Name, Ortsangabe, Kategorien etc.) auch benutzerspezifiche Daten übermittelt werden, ist eine personalisierte Antwort der Anwendung möglich. Bei der Fahrplan-Anwendung könnte man den Benutzer beispielsweise bevorzugte Linien wählen lassen, damit seine Wunschverbindung im Großstadtdschungel nicht untergeht. Die Antwort wird nach dem Check-In innerhalb der foursquare-Anwendung angezeigt. Sofern ein Link zu einer Website angehängt wird, ist der eingeblendete Text klickbar und je nach angebenen Schema (http, mailto, sms etc.) öffnet sich die entsprechende Anwendung. Die HTTP(S)-URIs werden standardmäßig in der foursquare-Anwendung eingebunden angezeigt.  
An dieser Stelle ist wichtig, dass der Endpunkt der eigenen Anwendung aus dem Internet per HTTPS erreichbar ist. Ein lokaler Webserver (auch wenn es nur eine Entwicklungsumgebung ist) kann da schnell mal zur Stolperfalle werden. Eine vertretbare Vorgabe von foursquare ist die Nutzung einer verschlüsselten HTTP-Verbindung, da personenbezogene Daten übermittelt werden.  
Hier sei auch an die [Richtlinien von foursquare](https://developer.foursquare.com/overview/community) verwiesen, die den korrekten Umgang mit den Daten beschreiben. Es gibt so einige Stellen, die für Anwendungsentwickler von Interesse sind und bei unbedarfter Herangehensweise eine nicht konforme Anwendung der Richtlinien zur Folge haben.

In unserer Anwendung **quetch** kann man (seinen Freunden) Quests, also im weiteren Sinne *Aufgaben*, hinterlassen. Da diese mit einer Kategorie oder einer speziellen Ortsangabe verbunden sind, bietet sich die [foursquare User Push API](https://developer.foursquare.com/overview/realtime) an. Durch einen Check-In weiß man wo sich der Benutzer befindet und kann damit eine Suche nach definierten Venues oder die einer entsprechenden Kategorie starten. Darüberhinaus können weitere Methoden zur Filterung (z.B. nur Quests von Freunden) zur Geltung kommen.  
Das Schöne an der Umsetzung ist, dass es sich nahtlos in die bestehende foursquare-Anwendung integriert und eine Ergebnisliste ein Zusatz zu Check-ins ist. Ein Wechsel der Anwendung findet erst statt, wenn sich der Benutezr für ein Ergebis interessiert und mehr Informationen darüber haben will. In unserem Fall liefern wir einfach Websites aus, die innerhalb der foursquare-Anwendung angezeigt werden. Auch wenn man lieber eine native Anwendung auf dem Smartphone starten möchte, kann man immer zum Ausgangspunkt innerhalb von foursquare zurückkehren, da über den Parameter [*fsqCallback*](https://developer.foursquare.com/resources/client#appintegration) eine Callback-URI angehängt wird.

Das gute an einem Hackathon war, dass man sich innerhalb einer sehr kurzen Zeitspanne sehr intensiv mit einer Sache thematisch auseinandersetzt. Der Zeitfaktor ist eine Sache, die man dabei sehr schnell unterschätzt, da zwei Tage am Anfang recht viel klingt. Das Wochenende war aber leider sehr schnell vorbei. Aber der nächste Hackathon kommt bestimmt&hellip;

So, das war mal etwas *Braindump* von meiner Seite, damit ich nicht sofort wieder alles vergesse. Vielleicht interessiert sich ja noch jemand für die Entwicklung von Anwendungen mit foursquare-Anbindung. Bei Fehlern, Lob, Kritik oder Fragen einfach einen Tweet an [@hgebhardt](https://twitter.com/hgebhardt) und ich werde mich damit auseinandersetzen.
